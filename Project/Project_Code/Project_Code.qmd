---
title: "Project Code"
author: "Brigitta Karen Tsai, Enrico Limberg, TzuTing Huang"
date: "March 19, 2025"
date-modified: "last-modified"
execute: 
  eval: true
  echo: true
  message: false
  freeze: true
---

# 1 Data Extraction

## 1.1 Install and Load R Packages

```{r}
pacman::p_load(rvest,dplyr,stringr,purrr,
               readr,httr,tidyr,fs,janitor,
               tidyverse,knitr)
```

## 1.2 Download data

```{r, eval=FALSE}
#This is the code where I downloaded the dataÔºö
base_url <- "https://www.weather.gov.sg/files/dailydata/"

# Site corresponding file code
stations <- c("Changi"="S24", "Ang Mo Kio"="S109", "Pulau Ubin"="S106", 
              "East Coast Parkway"="S107", "Seletar"="S25",
              "Clementi"="S50", "Jurong (West)"="S44", "Paya Lebar"="S06",
              "Newton"="S111", "Pasir Panjang"="S116", "Tai Seng"="S43",
              "Admiralty" = "S104", "Sembawang" = "S80", "Sentosa Island" = "S60",
              "Jurong Island" = "S117", "Choa Chu Kang (South)"="S121",
              "Tuas South"="S115")

# Define download time range
years <- 2024:2024
months <- sprintf("%02d", 1:12)  # 01, 02, ..., 12

# Only data from January 2024 to December 2024 are retained
date_combinations <- expand.grid(Year = years, Month = months, stringsAsFactors = FALSE) %>%
  filter(!(Year == 2024 & Month < "01"), # Exclude before Jan 2024
         !(Year == 2024 & Month > "12")) # Exclude after Dec 2024

# Create a directory to store data
dir.create("data/aspatial", showWarnings = FALSE)

# Record failed downloads
failed_downloads <- data.frame(Station = character(), Year = integer(), Month = character(), File_URL = character(), stringsAsFactors = FALSE)

# Iterate through stations, years, and months
for (station_name in names(stations)) {
  station_code <- stations[[station_name]]
  
  for (i in 1:nrow(date_combinations)) {
    year <- date_combinations$Year[i]
    month <- date_combinations$Month[i]
    
    # Construct the file name
    file_name <- paste0("DAILYDATA_", station_code, "_", year, month, ".csv")
    
    # Construct the full download URL
    file_url <- paste0(base_url, file_name)

    # Local save path
    file_path <- file.path("data/aspatial", file_name)
    
    # Check if the URL is valid
    response <- HEAD(file_url)
    
    if (status_code(response) == 200) {
      # Download the file
      download.file(file_url, destfile = file_path, mode = "wb")
      cat("‚úÖ Download successful:", file_name, "\n")
    } else {
      cat("‚ùå Download failed:", file_name, "\n")
      
      # Record the failed file
      failed_downloads <- rbind(failed_downloads, data.frame(
        Station = station_name,
        Year = year,
        Month = month,
        File_URL = file_url
      ))
    }
  }
}

# Save the failed download log
if (nrow(failed_downloads) > 0) {
  write.csv(failed_downloads, "data/failed_downloads_log.csv", row.names = FALSE)
  cat("‚ö†Ô∏è The failed download files have been recorded: data/failed_downloads_log.csv\n")
} else {
  cat("üéâ All data downloaded successfully!\n")
}
```

## 1.3 Merge data

```{r, eval=FALSE}
library(tidyverse)
library(janitor)

# Get all CSV files from the "data" folder that contain "DAILYDATA_" and "2024" in their names
files <- list.files("data/aspatial", pattern = "^DAILYDATA_.*_2024.*\\.csv$", full.names = TRUE)

# Define a safe reading function to ensure all columns are initially read as characters
safe_read <- safely(~ read_csv(
  .x,
  col_types = cols(.default = "c"),  # Read all columns as character to prevent merging errors
  locale = locale(encoding = "UTF-8")  # Ensure UTF-8 encoding
) %>%
  clean_names())  # Standardize column names

# Read all files
results <- map(files, safe_read)

# Filter out successful reads and combine data
all_data <- results %>%
  keep(~ is.null(.x$error)) %>%  # Keep only successfully read files
  map_dfr("result") %>%  # Combine them into a single dataframe
  mutate(across(where(is.character) & !matches("station"), ~ na_if(., "-"))) %>%  # Convert "-" to NA (except for "station" column)
  mutate(across(where(is.character) & !matches("station"), as.numeric))  # Convert character columns back to numeric (except "station")

# Check the merged data structure
glimpse(all_data)


```

## 1.4 Save to csv File

```{r, eval=FALSE}
write_csv(all_data, "data/aspatial/weather.csv", na = "", col_names = TRUE)
```

## 1.5 Remove Individual Files

```{r, eval=FALSE}
# Delete all CSV files in the "data" folder
file.remove(list.files("data/aspatial", pattern = "^DAILYDATA_.*_2024.*\\.csv$", full.names = TRUE))

cat("üóëÔ∏è All individual CSV files have been deleted.\n")
```

# 2 Data Preparation

```{r}
pacman::p_load(sp, sf, raster, spatstat, tmap, tidyverse,
               spNetwork, tmaptools, raster, leaflet, patchwork, gridExtra,
               ggplot2, png, grid, terra, gstat, viridis, automap)
```

# 2 Import Data

## 2.1 Import Aspatial Data

```{r}
weather <- read_csv("data/aspatial/weather.csv")
```

```{r}
station <- read_csv("data/aspatial/station.csv")
```

## 2.2 Import Geospatial Data

```{r}
mpsz <- st_read(dsn = "data/geospatial", 
                layer = "MPSZ-2019") %>% 
  st_transform(crs = 3414)
```

# 3 Data Preparation

## 3.1 Join Weather Data and Station Data

```{r}
daily_weather <- left_join(station, weather,
                         by = c("Station" = "station"),
                         relationship = "many-to-many")
```

## 3.2 Set CRS

```{r}
daily_weather <- st_as_sf(daily_weather, 
                      coords = c("Longitude",
                                 "Latitude"),
                      crs= 4326) %>%
  st_transform(crs = 3414)
```

## 3.3 Match Station Names

```{r}
sort(unique(daily_weather$Station))
```

```{r}
sort(unique(mpsz$SUBZONE_N))
```

```{r}
mpsz <- mpsz %>%
  mutate(SUBZONE_N = case_when(
    SUBZONE_N == "ADMIRALTY" ~ "Admiralty",
    SUBZONE_N == "AIRPORT ROAD" ~ "Airport Road",
    SUBZONE_N == "ALEXANDRA HILL" ~ "Alexandra Hill",
    SUBZONE_N == "ALEXANDRA NORTH" ~ "Alexandra North",
    SUBZONE_N == "ALJUNIED" ~ "Aljunied",
    SUBZONE_N == "ANAK BUKIT" ~ "Anak Bukit",
    SUBZONE_N == "ANCHORVALE" ~ "Anchorvale",
    SUBZONE_N == "ANG MO KIO" ~ "Ang Mo Kio",
    SUBZONE_N == "ANSON" ~ "Anson",
    SUBZONE_N == "BAHAR" ~ "Bahar",
    SUBZONE_N == "BALESTIER" ~ "Balestier",
    SUBZONE_N == "BANGKIT" ~ "Bangkit",
    SUBZONE_N == "BAYFRONT SUBZONE" ~ "Bayfront Subzone",
    SUBZONE_N == "BAYSHORE" ~ "Bayshore",
    SUBZONE_N == "BEDOK NORTH" ~ "Bedok North",
    SUBZONE_N == "BEDOK RESERVOIR" ~ "Bedok Reservoir",
    SUBZONE_N == "BEDOK SOUTH" ~ "Bedok South",
    SUBZONE_N == "BENCOOLEN" ~ "Bencoolen",
    SUBZONE_N == "BENDEMEER" ~ "Bendemeer",
    SUBZONE_N == "BENOI SECTOR" ~ "Benoi Sector",
    SUBZONE_N == "BIDADARI" ~ "Bidadari",
    SUBZONE_N == "BISHAN EAST" ~ "Bishan East",
    SUBZONE_N == "BOAT QUAY" ~ "Boat Quay",
    SUBZONE_N == "BOON KENG" ~ "Boon Keng",
    SUBZONE_N == "BOON LAY (WEST)" ~ "Boon Lay (West)",
    SUBZONE_N == "BOON TECK" ~ "Boon Teck",
    SUBZONE_N == "BOULEVARD" ~ "Boulevard",
    SUBZONE_N == "BRADDELL" ~ "Braddell",
    SUBZONE_N == "BRAS BASAH" ~ "Bras Basah",
    SUBZONE_N == "BRICKLAND" ~ "Brickland",
    SUBZONE_N == "BRICKWORKS" ~ "Brickworks",
    SUBZONE_N == "BUGIS" ~ "Bugis",
    SUBZONE_N == "BUKIT BATOK CENTRAL" ~ "Bukit Batok Central",
    SUBZONE_N == "BUKIT BATOK EAST" ~ "Bukit Batok East",
    SUBZONE_N == "BUKIT BATOK SOUTH" ~ "Bukit Batok South",
    SUBZONE_N == "BUKIT BATOK WEST" ~ "Bukit Batok West",
    SUBZONE_N == "BUKIT HO SWEE" ~ "Bukit Ho Swee",
    SUBZONE_N == "BUKIT MERAH" ~ "Bukit Merah",
    SUBZONE_N == "BUKIT PANJANG" ~ "Bukit Panjang",
    SUBZONE_N == "BUKIT TIMAH" ~ "Bukit Timah",
    SUBZONE_N == "CAIRNHILL" ~ "Cairnhill",
    SUBZONE_N == "CECIL" ~ "Cecil",
    SUBZONE_N == "CENTRAL SUBZONE" ~ "Central Subzone",
    SUBZONE_N == "CENTRAL WATER CATCHMENT" ~ "Central Water Catchment",
    SUBZONE_N == "CHAI CHEE" ~ "Chai Chee",
    SUBZONE_N == "CHANGI" ~ "Changi",
    SUBZONE_N == "CHANGI BAY" ~ "Changi Bay",
    SUBZONE_N == "CHANGI POINT" ~ "Changi Point",
    SUBZONE_N == "CHANGI WEST" ~ "Changi West",
    SUBZONE_N == "CHATSWORTH" ~ "Chatsworth",
    SUBZONE_N == "CHENG SAN" ~ "Cheng San",
    SUBZONE_N == "CHIN BEE" ~ "Chin Bee",
    SUBZONE_N == "CHINA SQUARE" ~ "China Square",
    SUBZONE_N == "CHINATOWN" ~ "Chinatown",
    SUBZONE_N == "CHOA CHU KANG (CENTRAL)" ~ "Choa Chu Kang (Central)",
    SUBZONE_N == "CHOA CHU KANG (NORTH)" ~ "Choa Chu Kang (North)",
    SUBZONE_N == "CHONG BOON" ~ "Chong Boon",
    SUBZONE_N == "CITY HALL" ~ "City Hall",
    SUBZONE_N == "CITY TERMINALS" ~ "City Terminals",
    SUBZONE_N == "CLARKE QUAY" ~ "Clarke Quay",
    SUBZONE_N == "CLEANTECH" ~ "Cleantech",
    SUBZONE_N == "CLEMENTI" ~ "Clementi",
    SUBZONE_N == "CLEMENTI NORTH" ~ "Clementi North",
    SUBZONE_N == "CLEMENTI WEST" ~ "Clementi West",
    SUBZONE_N == "CLEMENTI WOODS" ~ "Clementi Woods",
    SUBZONE_N == "CLIFFORD PIER" ~ "Clifford Pier",
    SUBZONE_N == "COMMONWEALTH" ~ "Commonwealth",
    SUBZONE_N == "COMPASSVALE" ~ "Compassvale",
    SUBZONE_N == "CONEY ISLAND" ~ "Coney Island",
    SUBZONE_N == "CORONATION ROAD" ~ "Coronation Road",
    SUBZONE_N == "CRAWFORD" ~ "Crawford",
    SUBZONE_N == "DAIRY FARM" ~ "Dairy Farm",
    SUBZONE_N == "DEFU INDUSTRIAL PARK" ~ "Defu Industrial Park",
    SUBZONE_N == "DEPOT ROAD" ~ "Depot Road",
    SUBZONE_N == "DHOBY GHAUT" ~ "Dhoby Ghaut",
    SUBZONE_N == "DOVER" ~ "Dover",
    SUBZONE_N == "DUNEARN" ~ "Dunearn",
    SUBZONE_N == "EAST COAST PARKWAY" ~ "East Coast Parkway",
    SUBZONE_N == "EVERTON PARK" ~ "Everton Park",
    SUBZONE_N == "FABER" ~ "Faber",
    SUBZONE_N == "FAJAR" ~ "Fajar",
    SUBZONE_N == "FARRER COURT" ~ "Farrer Court",
    SUBZONE_N == "FARRER PARK" ~ "Farrer Park",
    SUBZONE_N == "FERNVALE" ~ "Fernvale",
    TRUE ~ SUBZONE_N  # Keep other values unchanged
  ))

```

## 3.4 Rename Columns

```{r}
weather <- weather %>%
  rename(Station = station,
         Year = year,
         Month = month,
         Day = day,
         rainfall_total = daily_rainfall_total_mm,
         rainfall_30 = highest_30_min_rainfall_mm,
         rainfall_60 = highest_60_min_rainfall_mm,
         rainfall_120 = highest_120_min_rainfall_mm,
         mean_temp = mean_temperature_c,
         max_temp = maximum_temperature_c,
         min_temp = minimum_temperature_c,
         mean_wind = mean_wind_speed_km_h,
         max_wind = max_wind_speed_km_h)
```

```{r}
daily_weather <- daily_weather %>%
  rename(Year = year,
         Month = month,
         Day = day,
         rainfall_total = daily_rainfall_total_mm,
         rainfall_30 = highest_30_min_rainfall_mm,
         rainfall_60 = highest_60_min_rainfall_mm,
         rainfall_120 = highest_120_min_rainfall_mm,
         mean_temp = mean_temperature_c,
         max_temp = maximum_temperature_c,
         min_temp = minimum_temperature_c,
         mean_wind = mean_wind_speed_km_h,
         max_wind = max_wind_speed_km_h)
```

## 3.5 Remove Missing Records

Define list of stations:

```{r}
stations <- c("Admiralty", "Ang Mo Kio", "Changi", "Choa Chu Kang (South)",
              "Clementi", "East Coast Parkway", "Jurong (West)",
              "Jurong Island", "Newton", "Pasir Panjang", "Paya Lebar",
              "Pulau Ubin", "Seletar", "Sembawang", "Sentosa Island",
              "Tai Seng", "Tuas South")
```

```{r}
weather <- weather %>% 
  filter(!(Station %in% stations & (is.na(rainfall_total) | is.na(rainfall_30) | 
                                    is.na(rainfall_60) | is.na(rainfall_120) | 
                                    is.na(mean_temp) | is.na(max_temp) | 
                                    is.na(min_temp) | is.na(mean_wind) | 
                                    is.na(max_wind))))
```

```{r}
daily_weather <- daily_weather %>% 
  filter(!(Station %in% stations & (is.na(rainfall_total) | is.na(rainfall_30) | 
                                    is.na(rainfall_60) | is.na(rainfall_120) | 
                                    is.na(mean_temp) | is.na(max_temp) | 
                                    is.na(min_temp) | is.na(mean_wind) | 
                                    is.na(max_wind))))
```

## 3.6 Handling Date Data

```{r}
weather <- weather %>%
  mutate(
    yearmonth = make_date(Year, Month, 1)
  )
```

```{r}
daily_weather <- daily_weather %>%
  mutate(
    yearmonth = make_date(Year, Month, 1),
    month = format(ymd(yearmonth), "%B")
  )
```

## 3.7 Derive Monthly Data

```{r}
# Create a dataset with all combinations of yearmonth and Station (to keep all stations)
all_combinations <- daily_weather %>%
  st_drop_geometry() %>% # Drop geometry temporarily
  distinct(yearmonth, Station) 
```

### 3.7.1 Monthly Rainfall

```{r}
# Merge the combinations back to weather_map to fill in missing rainfall data
monthly_rainfall <- daily_weather %>%
  group_by(yearmonth, Station, geometry) %>%
  summarize(
    max_rainfall = if (all(is.na(rainfall_total))) NA_real_ else max(rainfall_total, na.rm = TRUE),
    mean_rainfall = if (all(is.na(rainfall_total))) NA_real_ else mean(rainfall_total, na.rm = TRUE),
    .groups = "drop"
  ) %>%
  right_join(all_combinations, by = c("yearmonth", "Station")) %>%
  arrange(yearmonth, Station)
```

```{r}
months_2024 <- seq(ymd("2024-01-01"), ymd("2024-12-01"), by = "month")

stations_missing_yearmonth <- monthly_rainfall %>%
  filter(is.na(yearmonth)) %>%
  mutate(yearmonth = list(months_2024)) %>% # Append rows for remaining stations
  unnest(yearmonth)

monthly_rainfall <- monthly_rainfall %>%
  filter(!is.na(yearmonth)) %>%
  bind_rows(stations_missing_yearmonth) %>%
  arrange(Station, yearmonth)
```

### 3.7.2 Monthly Temperature

```{r}
monthly_temp <- daily_weather %>%
  group_by(yearmonth, Station, geometry) %>%
  summarize(
    max_temp = if (all(is.na(max_temp))) NA_real_ else max(max_temp, na.rm = TRUE),
    mean_temp = if (all(is.na(mean_temp))) NA_real_ else mean(mean_temp, na.rm = TRUE),
    .groups = "drop"
  ) %>%
  right_join(all_combinations, by = c("yearmonth", "Station")) %>%
  arrange(yearmonth, Station)
```

```{r}
months_2024 <- seq(ymd("2024-01-01"), ymd("2024-12-01"), by = "month")

stations_missing_yearmonth <- monthly_temp %>%
  filter(is.na(yearmonth)) %>%
  mutate(yearmonth = list(months_2024)) %>% # Append rows for remaining stations
  unnest(yearmonth)

monthly_temp <- monthly_temp %>%
  filter(!is.na(yearmonth)) %>%
  bind_rows(stations_missing_yearmonth) %>%
  arrange(Station, yearmonth)
```

### 3.7.3 Monthly Wind Speed

```{r}
monthly_wind <- daily_weather %>%
  group_by(yearmonth, Station, geometry) %>%
  summarize(
    max_wind = if (all(is.na(max_wind))) NA_real_ else max(max_wind, na.rm = TRUE),
    mean_wind = if (all(is.na(mean_wind))) NA_real_ else mean(mean_wind, na.rm = TRUE),
    .groups = "drop"
  ) %>%
  right_join(all_combinations, by = c("yearmonth", "Station")) %>%
  arrange(yearmonth, Station)
```

```{r}
months_2024 <- seq(ymd("2024-01-01"), ymd("2024-12-01"), by = "month")

stations_missing_yearmonth <- monthly_wind %>%
  filter(is.na(yearmonth)) %>%
  mutate(yearmonth = list(months_2024)) %>% # Append rows for remaining stations
  unnest(yearmonth)

monthly_wind <- monthly_wind %>%
  filter(!is.na(yearmonth)) %>%
  bind_rows(stations_missing_yearmonth) %>%
  arrange(Station, yearmonth)
```

## 3.8 Join mpsz and weather

```{r}
weather_nogeom <- st_drop_geometry(daily_weather)
```

```{r}
map <- left_join(mpsz, weather_nogeom,
                         by = c("SUBZONE_N" = "Station"),
                         relationship = "many-to-many")
```

## 3.9 Derive Parameters

In the analysis, we aim to provide several aggregations to see the monthly weather conditions in the form of geospatial map. The following are the variables that we aim to show in the chart:

**Weather Parameter:**

1.  Rainfall
2.  Wind Speed
3.  Temperature

**Measurement Options:**

1.  Mean
2.  Maximum
3.  Frequency

**Time Period:**

1.  Monthly

### 3.9.1 Rainfall Parameters

To define the frequency of rainfall, we will use **"Heavy Rain"** as the baseline to define the frequency of rainfall in a defined period of time (weekly/monthly/quarterly). Any daily rainfall recorded that is above or equal to **31 mm/day** is considered as heavy rain.

::: tabset-pane
### Rainfall Parameters

::: {.table .table-striped .table-hover .table-bordered}
| Rain Type            | Total Daily Rainfall (mm) |
|----------------------|---------------------------|
| No Rain              | 0                         |
| Very Light Rain      | 0.1 - 0.9                 |
| Light Rain           | 1.0 - 10                  |
| Moderate Rain        | 11 - 30                   |
| **Heavy Rain**       | **31 - 70**               |
| Very Heavy Rain      | 71 - 150                  |
| Extremely Heavy Rain | \> 151                    |
:::
:::

source: https://www.nchm.gov.bt/attachment/ckfinder/userfiles/files/Rainfall%20intensity%20classification.pdf

```{r}
# Flag heavy rains in the daily_weather dataframe
daily_weather <- daily_weather %>%
  mutate(heavy_rain_count = if_else(rainfall_total > 31, 1, 0))
```

```{r}
# Aggregate the total monthly frequency
frequency_heavy_rain <- daily_weather %>%
  group_by(Station, yearmonth) %>%
  summarise(frequency_heavy_rain = sum(heavy_rain_count), .groups = "drop")
```

```{r}
# 1. Drop the geometry column (only for non-spatial join)
monthly_rainfall_no_geom <- st_drop_geometry(monthly_rainfall)

# 2. Perform the left join on the data (without geometry)
monthly_rainfall_no_geom <- left_join(monthly_rainfall_no_geom, frequency_heavy_rain,
                                     by = c("Station" = "Station", 
                                            "yearmonth" = "yearmonth"))

# 3. Add the geometry column back to the joined dataframe
monthly_rainfall <- st_sf(monthly_rainfall_no_geom,
                          geometry = st_geometry(monthly_rainfall))
```

```{r}
monthly_rainfall <- monthly_rainfall %>%
  mutate(month = format(ymd(yearmonth), "%B"))
```

### 3.9.2 Temperature Parameter

::: tabset-pane
### Temperature Parameters

::: {.table .table-striped .table-hover .table-bordered}
| Heat Stress          | Temperature (¬∞C) |
|----------------------|------------------|
| Low Heat Stress      | \< 31            |
| Moderate Heat Stress | 31 ‚â§ ¬∞C \< 33    |
| **High Heat Stress** | **‚â• 33**         |
:::
:::

source: https://www.weather.gov.sg/heat-stress/

```{r}
range(daily_weather$max_temp, na.rm=TRUE)
```

```{r}
daily_weather <- daily_weather %>%
  mutate(high_heat_count = if_else(max_temp >= 33, 1, 0))
```

```{r}
frequency_high_heat <- daily_weather %>%
  group_by(Station, yearmonth) %>%
  summarise(frequency_high_heat = sum(high_heat_count), .groups = "drop")
```

```{r}
# 1. Drop the geometry column (only for non-spatial join)
monthly_temp_no_geom <- st_drop_geometry(monthly_temp)

# 2. Perform the left join on the data (without geometry)
monthly_temp_no_geom <- left_join(monthly_temp_no_geom, frequency_high_heat,
                                     by = c("Station" = "Station", 
                                            "yearmonth" = "yearmonth"))

# 3. Add the geometry column back to the joined dataframe
monthly_temp <- st_sf(monthly_temp_no_geom,
                          geometry = st_geometry(monthly_temp))
```

```{r}
monthly_temp <- monthly_temp %>%
  mutate(month = format(ymd(yearmonth), "%B"))
```

### 3.9.3 Wind Speed Parameter

The parameter for wind speed is based on **Beaufort Wind Scale**. To define strong wind force, we will use wind force **7** to determine frequency of strong winds in Singapore.

::: tabset-pane
### Wind Speed Parameters

::: {.table .table-striped .table-hover .table-bordered}
| Wind Force | Description     | Speed (km/h) |
|------------|-----------------|--------------|
| 0          | Calm            | \< 1         |
| 1          | Light Air       | 1 - 5        |
| 2          | Light Breeze    | 6 - 11       |
| 3          | Gentle Breeze   | 12 - 19      |
| 4          | Moderate Breeze | 20 - 28      |
| 5          | Fresh Breeze    | 29 - 38      |
| 6          | Strong Breeze   | 38 - 49      |
| **7**      | **Near Gale**   | **50 - 61**  |
| 8          | Gale            | 62 - 74      |
| 9          | Strong Gale     | 75 - 88      |
| 10         | Storm           | 89 - 102     |
| 11         | Violent Storm   | 103 - 117    |
| 12         | Hurricane       | ‚â• 118        |
:::
:::

source: https://www.rmets.org/metmatters/beaufort-wind-scale

```{r}
range(daily_weather$max_wind, na.rm=TRUE)
```

```{r}
daily_weather <- daily_weather %>%
  mutate(strong_wind_count = if_else(max_wind >= 50, 1, 0))
```

```{r}
frequency_strong_wind <- daily_weather %>%
  group_by(Station, yearmonth) %>%
  summarise(frequency_strong_wind = sum(strong_wind_count), .groups = "drop")
```

```{r}
# 1. Drop the geometry column (only for non-spatial join)
monthly_wind_no_geom <- st_drop_geometry(monthly_wind)

# 2. Perform the left join on the data (without geometry)
monthly_wind_no_geom <- left_join(monthly_wind_no_geom, frequency_strong_wind,
                                     by = c("Station" = "Station", 
                                            "yearmonth" = "yearmonth"))

# 3. Add the geometry column back to the joined dataframe
monthly_wind <- st_sf(monthly_wind_no_geom,
                          geometry = st_geometry(monthly_wind))
```

```{r}
monthly_wind <- monthly_wind %>%
  mutate(month = format(ymd(yearmonth), "%B"))
```

## 3.10 Remove Missing Values

```{r}
monthly_rainfall <- na.omit(monthly_rainfall)
monthly_temp <- na.omit(monthly_temp)
monthly_wind <- na.omit(monthly_wind)
```

## 3.11 Combine Monthly Data

```{r}
# Extract geometry from monthly_temp (assuming geometry is the same across all dataframes)
geometry_data <- monthly_temp %>% select(Station, yearmonth, month, geometry)

# Drop geometry using st_drop_geometry()
monthly_temp_no_geom <- monthly_temp %>% st_drop_geometry()
monthly_rainfall_no_geom <- monthly_rainfall %>% st_drop_geometry()
monthly_wind_no_geom <- monthly_wind %>% st_drop_geometry()

# Perform full joins on non-spatial data
monthly_weather_no_geom <- monthly_temp_no_geom %>%
  full_join(monthly_rainfall_no_geom, by = c("Station", "yearmonth", "month")) %>%
  full_join(monthly_wind_no_geom, by = c("Station", "yearmonth", "month"))

# Reattach the geometry column
monthly_weather <- left_join(monthly_weather_no_geom, geometry_data, by = c("Station", "yearmonth", "month"))

# Convert back to an sf object
monthly_weather <- st_as_sf(monthly_weather)
```

```{r}
# Rename column
monthly_weather <- monthly_weather %>% 
  rename(
    "Maximum Temperature" = max_temp,
    "Mean Temperature" = mean_temp,
    "Frequency of Extreme Heat" = frequency_high_heat,
    "Maximum Rainfall" = max_rainfall,
    "Mean Rainfall" = mean_rainfall,
    "Frequency of Heavy Rain" = frequency_heavy_rain,
    "Maximum Wind Speed" = max_wind,
    "Mean Wind Speed" = mean_wind,
    "Frequency of Strong Wind" = frequency_strong_wind
  )
```

## 3.12 Write Data to RDS

```{r}
write_rds(monthly_weather, "data/rds/monthly_weather.rds")
write_rds(daily_weather, "data/rds/daily_weather.rds")
write_rds(monthly_rainfall, "data/rds/monthly_rainfall.rds")
write_rds(monthly_temp, "data/rds/monthly_temp.rds")
write_rds(monthly_wind, "data/rds/monthly_wind.rds")
```
