---
title: "Project Code"
author: "Brigitta Karen Tsai, Enrico Limberg, TzuTing Huang"
date: "March 19, 2025"
date-modified: "last-modified"
execute: 
  eval: true
  echo: true
  message: false
  freeze: true
---

# 1 Data Extraction

## 1.1 Install and Load R Packages

```{r}
pacman::p_load(rvest,dplyr,stringr,purrr,
               readr,httr,tidyr,fs,janitor,
               tidyverse,knitr)
```

## 1.2 Download data

```{r, eval=FALSE}
#This is the code where I downloaded the dataÔºö
base_url <- "https://www.weather.gov.sg/files/dailydata/"

# Site corresponding file code
stations <- c("Changi"="S24", "Ang Mo Kio"="S109", "Pulau Ubin"="S106", 
              "East Coast Parkway"="S107", "Seletar"="S25",
              "Clementi"="S50", "Jurong (West)"="S44", "Paya Lebar"="S06",
              "Newton"="S111", "Pasir Panjang"="S116", "Tai Seng"="S43",
              "Admiralty" = "S104", "Sembawang" = "S80", "Sentosa Island" = "S60",
              "Jurong Island" = "S117", "Choa Chu Kang (South)"="S121",
              "Tuas South"="S115")

# Define download time range
years <- 2024:2024
months <- sprintf("%02d", 1:12)  # 01, 02, ..., 12

# Only data from January 2024 to December 2024 are retained
date_combinations <- expand.grid(Year = years, Month = months, stringsAsFactors = FALSE) %>%
  filter(!(Year == 2024 & Month < "01"), # Exclude before Jan 2024
         !(Year == 2024 & Month > "12")) # Exclude after Dec 2024

# Create a directory to store data
dir.create("data/aspatial", showWarnings = FALSE)

# Record failed downloads
failed_downloads <- data.frame(Station = character(), Year = integer(), Month = character(), File_URL = character(), stringsAsFactors = FALSE)

# Iterate through stations, years, and months
for (station_name in names(stations)) {
  station_code <- stations[[station_name]]
  
  for (i in 1:nrow(date_combinations)) {
    year <- date_combinations$Year[i]
    month <- date_combinations$Month[i]
    
    # Construct the file name
    file_name <- paste0("DAILYDATA_", station_code, "_", year, month, ".csv")
    
    # Construct the full download URL
    file_url <- paste0(base_url, file_name)

    # Local save path
    file_path <- file.path("data/aspatial", file_name)
    
    # Check if the URL is valid
    response <- HEAD(file_url)
    
    if (status_code(response) == 200) {
      # Download the file
      download.file(file_url, destfile = file_path, mode = "wb")
      cat("‚úÖ Download successful:", file_name, "\n")
    } else {
      cat("‚ùå Download failed:", file_name, "\n")
      
      # Record the failed file
      failed_downloads <- rbind(failed_downloads, data.frame(
        Station = station_name,
        Year = year,
        Month = month,
        File_URL = file_url
      ))
    }
  }
}

# Save the failed download log
if (nrow(failed_downloads) > 0) {
  write.csv(failed_downloads, "data/failed_downloads_log.csv", row.names = FALSE)
  cat("‚ö†Ô∏è The failed download files have been recorded: data/failed_downloads_log.csv\n")
} else {
  cat("üéâ All data downloaded successfully!\n")
}
```

## 1.3 Merge data

```{r, eval=FALSE}
library(tidyverse)
library(janitor)

# Get all CSV files from the "data" folder that contain "DAILYDATA_" and "2024" in their names
files <- list.files("data/aspatial", pattern = "^DAILYDATA_.*_2024.*\\.csv$", full.names = TRUE)

# Define a safe reading function to ensure all columns are initially read as characters
safe_read <- safely(~ read_csv(
  .x,
  col_types = cols(.default = "c"),  # Read all columns as character to prevent merging errors
  locale = locale(encoding = "UTF-8")  # Ensure UTF-8 encoding
) %>%
  clean_names())  # Standardize column names

# Read all files
results <- map(files, safe_read)

# Filter out successful reads and combine data
all_data <- results %>%
  keep(~ is.null(.x$error)) %>%  # Keep only successfully read files
  map_dfr("result") %>%  # Combine them into a single dataframe
  mutate(across(where(is.character) & !matches("station"), ~ na_if(., "-"))) %>%  # Convert "-" to NA (except for "station" column)
  mutate(across(where(is.character) & !matches("station"), as.numeric))  # Convert character columns back to numeric (except "station")

# Check the merged data structure
glimpse(all_data)


```

## 1.4 Save to csv File

```{r, eval=FALSE}
write_csv(all_data, "data/aspatial/weather.csv", na = "", col_names = TRUE)
```

## 1.5 Remove Individual Files

```{r, eval=FALSE}
# Delete all CSV files in the "data" folder
file.remove(list.files("data/aspatial", pattern = "^DAILYDATA_.*_2024.*\\.csv$", full.names = TRUE))

cat("üóëÔ∏è All individual CSV files have been deleted.\n")
```

# 2 Data Preparation

```{r}
pacman::p_load(sp, sf, raster, spatstat, tmap, tidyverse,
               spNetwork, tmaptools)
```

# 2 Import Data

## 2.1 Import Aspatial Data

```{r}
weather <- read_csv("data/aspatial/weather.csv")
```

## 2.2 Import Geospatial Data

```{r}
mpsz <- st_read(dsn = "data/geospatial", 
                layer = "MP14_SUBZONE_WEB_PL")
```

# 3 Data Preparation

## 3.1 Match Station Names

```{r}
sort(unique(weather$station))
```

```{r}
sort(unique(mpsz$SUBZONE_N))
```

```{r}
mpsz <- mpsz %>%
  mutate(SUBZONE_N = case_when(
    SUBZONE_N == "ADMIRALTY" ~ "Admiralty",
    SUBZONE_N == "ANG MO KIO TOWN CENTRE" ~ "Ang Mo Kio",
    SUBZONE_N %in% c("CHANGI AIRPORT", "CHANGI BAY", 
                     "CHANGI POINT", "CHANGI WEST") ~ "Changi",
    SUBZONE_N == "CHOA CHU KANG CENTRAL" ~ "Choa Chu Kang (South)",
    SUBZONE_N == "CLEMENTI CENTRAL" ~ "Clementi",
    SUBZONE_N == "EAST COAST" ~ "East Coast Parkway",
    SUBZONE_N == "JURONG WEST CENTRAL" ~ "Jurong (West)",
    SUBZONE_N == "JURONG ISLAND AND BUKOM" ~ "Jurong Island",
    SUBZONE_N == "NEWTON CIRCUS" ~ "Newton",
    SUBZONE_N %in% c("PASIR PANJANG 1", "PASIR PANJANG 2") ~ "Pasir Panjang",
    SUBZONE_N %in% c("PAYA LEBAR EAST", "PAYA LEBAR NORTH", 
                     "PAYA LEBAR WEST") ~ "Paya Lebar",
    SUBZONE_N == "PULAU UBIN" ~ "Pulau Ubin",
    SUBZONE_N %in% c("SELETAR", "SELETAR AEROSPACE PARK") ~ "Seletar",
    SUBZONE_N %in% c("SEMBAWANG CENTRAL", "SEMBAWANG EAST", "SEMBAWANG NORTH",
                     "SEMBAWANG SPRINGS", "SEMBAWANG STRAITS") ~ "Sembawang",
    SUBZONE_N == "SENTOSA" ~ "Sentosa Island",
    SUBZONE_N == "TAI SENG" ~ "Tai Seng",
    SUBZONE_N == "TUAS BAY" ~ "Tuas South",
    TRUE ~ SUBZONE_N
  ))
```

## 3.2 Join Dataset

```{r}
daily_weather <- left_join(mpsz, weather,
                         by = c("SUBZONE_N" = "station"),
                         relationship = "many-to-many")
```

## 3.3 Remove Unnecessary Columns

```{r}
daily_weather <- subset(daily_weather, select = -c(OBJECTID, SUBZONE_NO, SUBZONE_C,
                                       PLN_AREA_C, REGION_C, FMEL_UPD_D, 
                                       CA_IND, INC_CRC))
```

## 3.4 Rename Columns

```{r}
weather <- weather %>%
  rename(Station = station,
         Year = year,
         Month = month,
         Day = day,
         rainfall_total = daily_rainfall_total_mm,
         rainfall_30 = highest_30_min_rainfall_mm,
         rainfall_60 = highest_60_min_rainfall_mm,
         rainfall_120 = highest_120_min_rainfall_mm,
         mean_temp = mean_temperature_c,
         max_temp = maximum_temperature_c,
         min_temp = minimum_temperature_c,
         mean_wind = mean_wind_speed_km_h,
         max_wind = max_wind_speed_km_h)
```

```{r}
daily_weather <- daily_weather %>%
  rename(Station = SUBZONE_N,
         Area = PLN_AREA_N,
         Region = REGION_N,
         Year = year,
         Month = month,
         Day = day,
         rainfall_total = daily_rainfall_total_mm,
         rainfall_30 = highest_30_min_rainfall_mm,
         rainfall_60 = highest_60_min_rainfall_mm,
         rainfall_120 = highest_120_min_rainfall_mm,
         mean_temp = mean_temperature_c,
         max_temp = maximum_temperature_c,
         min_temp = minimum_temperature_c,
         mean_wind = mean_wind_speed_km_h,
         max_wind = max_wind_speed_km_h)
```

## 3.5 Remove Missing Records

Define list of stations:

```{r}
stations <- c("Admiralty", "Ang Mo Kio", "Changi", "Choa Chu Kang (South)",
              "Clementi", "East Coast Parkway", "Jurong (West)",
              "Jurong Island", "Newton", "Pasir Panjang", "Paya Lebar",
              "Pulau Ubin", "Seletar", "Sembawang", "Sentosa Island",
              "Tai Seng", "Tuas South")
```

```{r}
weather <- weather %>% 
  filter(!(Station %in% stations & (is.na(rainfall_total) | is.na(rainfall_30) | 
                                    is.na(rainfall_60) | is.na(rainfall_120) | 
                                    is.na(mean_temp) | is.na(max_temp) | 
                                    is.na(min_temp) | is.na(mean_wind) | 
                                    is.na(max_wind))))
```

```{r}
daily_weather <- daily_weather %>% 
  filter(!(Station %in% stations & (is.na(rainfall_total) | is.na(rainfall_30) | 
                                    is.na(rainfall_60) | is.na(rainfall_120) | 
                                    is.na(mean_temp) | is.na(max_temp) | 
                                    is.na(min_temp) | is.na(mean_wind) | 
                                    is.na(max_wind))))
```

## 3.6 Handling Date Data

```{r}
weather <- weather %>%
  mutate(
    yearmonth = make_date(Year, Month, 1)
  )
```

```{r}
daily_weather <- daily_weather %>%
  mutate(
    yearmonth = make_date(Year, Month, 1)
  )
```

## 3.7 Combining Geometry

```{r}
daily_weather <- daily_weather %>%
  group_by(Station) %>%
  mutate(geometry = st_union(geometry)) %>%
  mutate(geometry = st_cast(geometry, "MULTIPOLYGON")) %>%
  ungroup()
```

## 3.8 Derive Monthly Data

```{r}
# Create a dataset with all combinations of yearmonth and Station (to keep all stations)
all_combinations <- daily_weather %>%
  st_drop_geometry() %>% # Drop geometry temporarily
  distinct(yearmonth, Station) 
```

```{r}
# Merge the combinations back to weather_map to fill in missing rainfall data
monthly_rainfall <- daily_weather %>%
  group_by(yearmonth, Station, geometry) %>%
  summarize(
    max_rainfall = if (all(is.na(rainfall_total))) NA_real_ else max(rainfall_total, na.rm = TRUE),
    mean_rainfall = if (all(is.na(rainfall_total))) NA_real_ else mean(rainfall_total, na.rm = TRUE),
    .groups = "drop"
  ) %>%
  right_join(all_combinations, by = c("yearmonth", "Station")) %>%
  arrange(yearmonth, Station)
```

```{r}
months_2024 <- seq(ymd("2024-01-01"), ymd("2024-12-01"), by = "month")

stations_missing_yearmonth <- monthly_rainfall %>%
  filter(is.na(yearmonth)) %>%
  mutate(yearmonth = list(months_2024)) %>% # Append rows for remaining stations
  unnest(yearmonth)

monthly_rainfall <- monthly_rainfall %>%
  filter(!is.na(yearmonth)) %>%
  bind_rows(stations_missing_yearmonth) %>%
  arrange(Station, yearmonth)
```